bind_cols(loglik=ll[1], loglik.se = ll[2])
} -> results
mifs_local %>%
traces() %>%
melt() %>%
ggplot(aes(x = iteration, y = value, group = L1, color = factor(L1)))+
geom_line()+
guides(color = FALSE)+
facet_wrap(~variable, scales = "free_y")
pairs(~loglik+Beta+eta+rho, data = results,pch = 16)
set.seed(2062379496)
runifDesign(
lower = c(Beta = 5, rho = 0.2, eta = 0),
upper = c(Beta = 80, rho = 0.9, eta = 0.4),
nseq = 300
) -> guesses
mf1 <- mifs_local[[1]]
registerDoRNG(1270401374)
foreach(guess = iter(guesses, "row"), .combine = rbind) %dopar% {
library(pomp)
library(tidyverse)
mf1 %>%
mif2(params=c(unlist(guess),fixed_params)) %>%
mif2(Nmif = 100) -> mf
replicate(
10,
mf %>% pfilter(Np = 10000) %>% logLik()
) %>%
logmeanexp(se=TRUE) -> ll
mf %>% coef() %>% bind_rows() %>%
bind_cols(loglik =ll[1], loglik.se = ll[2])
} -> results
read_csv("measles_params.csv") %>%
filter(loglik > max(loglik)-50) %>%
bind_rows(guesses) %>%
mutate(type=if_else(is.na(loglik),"guess","result")) %>%
arrange(type) -> all
View(all)
View(results)
pairs(~loglik+Beta+eta+rho, data = all,
col = ifelse(all$type=="guess",grey(0.5),"red"),pch=16)
read_csv("measles_params.csv") %>% bind_rows(results) %>% arrange(-loglik) %>% write_csv("measles_params.csv")
read_csv("measles_params.csv") %>%
filter(loglik > max(loglik)-50) %>%
bind_rows(guesses) %>%
mutate(type=if_else(is.na(loglik),"guess","result")) %>%
arrange(type) -> all
pairs(~loglik+Beta+eta+rho, data = all,
col = ifelse(all$type=="guess",grey(0.5),"red"),pch=16)
View(all)
read_csv("measles_params.csv") %>% bind_rows(results) %>% arrange(-loglik) %>% write_csv("measles_params.csv")
View(results)
read_csv("measles_params.csv") %>% bind_rows(results) %>% arrange(-loglik) %>% write_csv("measles_params.csv")
results %>% bind_rows() %>% arrange(-loglik) %>% write_csv("measles_params.csv")
read_csv("measles_params.csv") %>%
filter(loglik > max(loglik)-50) %>%
bind_rows(guesses) %>%
mutate(type=if_else(is.na(loglik),"guess","result")) %>%
arrange(type) -> all
pairs(~loglik+Beta+eta+rho, data = all,
col = ifelse(all$type=="guess",grey(0.5),"red"),pch=16)
View(all)
results %>%
filter(loglik > max(loglik)-50) %>%
bind_rows(guesses) %>%
mutate(type=if_else(is.na(loglik),"guess","result")) %>%
arrange(type) -> all
View(all)
View(results)
View(guesses)
pairs(~loglik+Beta+eta+rho, data = results,
col = ifelse(all$type=="guess",grey(0.5),"red"),pch=16)
results %>%
filter(loglik > max(loglik)-50) %>%
bind_rows(guesses) %>%
mutate(type=if_else(is.na(loglik),"guess","result")) %>%
arrange(type) -> all
View(all)
View(results)
results %>%
filter(loglik > max(loglik)-50) %>%
bind_rows(guesses) %>%
mutate(type=if_else(is.na(loglik.se),"guess","result")) %>%
arrange(type) -> all
View(all)
View(all)
results %>%
filter(loglik > max(loglik)-50) %>%
bind_rows(guesses) %>%
mutate(type=if_else(is.na(loglik.se),"guess","result")) %>%
arrange(type) -> all
pairs(~loglik+Beta+eta+rho, data = results,
col = ifelse(all$type=="guess",grey(0.5),"red"),pch=16)
results %>%
filter(loglik > max(loglik)-50) %>%
bind_rows(guesses) %>%
mutate(type=if_else(is.na(loglik.se),"guess","result")) %>%
arrange(type) -> all
pairs(~loglik+Beta+eta+rho, data = all,
col = ifelse(all$type=="guess",grey(0.5),"red"),pch=16)
results %>%
filter(loglik > max(loglik)-50) %>%
bind_rows(guesses) %>%
mutate(type=if_else(is.nan(loglik),"guess","result")) %>%
arrange(type) -> all
pairs(~loglik+Beta+eta+rho, data = all,
col = ifelse(all$type=="guess",grey(0.5),"red"),pch=16)
View(all)
results %>%
bind_rows(guesses) %>%
mutate(type=if_else(is.nan(loglik),"guess","result")) %>%
arrange(type) -> all
pairs(~loglik+Beta+eta+rho, data = all,
col = ifelse(all$type=="guess",grey(0.5),"red"),pch=16)
results %>%
filter(loglik > max(loglik)-50)
bind_rows(guesses) %>%
mutate(type=if_else(is.nan(loglik),"guess","result")) %>%
arrange(type) -> all
View(results)
bind_rows(guesses) %>%
mutate(type=if_else(is.nan(loglik),"guess","result")) %>%
arrange(type) -> all
results %>%
filter(loglik > -130)
pairs(~loglik+Beta+eta+rho, data = all,
col = ifelse(all$type=="guess",grey(0.5),"red"),pch=16)
View(results)
results %>%
filter(loglik > -120)
bind_rows(guesses) %>%
mutate(type=if_else(is.nan(loglik),"guess","result")) %>%
arrange(type) -> all
results %>%
filter(loglik > -120) %>%
bind_rows(guesses) %>%
mutate(type=if_else(is.nan(loglik),"guess","result")) %>%
arrange(type) -> all
pairs(~loglik+Beta+eta+rho, data = all,
col = ifelse(all$type=="guess",grey(0.5),"red"),pch=16)
results %>%
filter(loglik > -110) %>%
bind_rows(guesses) %>%
mutate(type=if_else(is.nan(loglik),"guess","result")) %>%
arrange(type) -> all
pairs(~loglik+Beta+eta+rho, data = all,
col = ifelse(all$type=="guess",grey(0.5),"red"),pch=16)
results %>%
filter(loglik > -120) %>%
bind_rows(guesses) %>%
mutate(type=if_else(is.nan(loglik),"guess","result")) %>%
arrange(type) -> all
pairs(~loglik+Beta+eta+rho, data = all,
col = ifelse(all$type=="guess",grey(0.5),"red"),pch=16)
results %>%
filter(loglik > -130) %>%
bind_rows(guesses) %>%
mutate(type=if_else(is.nan(loglik),"guess","result")) %>%
arrange(type) -> all
pairs(~loglik+Beta+eta+rho, data = all,
col = ifelse(all$type=="guess",grey(0.5),"red"),pch=16)
results %>%
filter(loglik > -160) %>%
bind_rows(guesses) %>%
mutate(type=if_else(is.nan(loglik),"guess","result")) %>%
arrange(type) -> all
pairs(~loglik+Beta+eta+rho, data = all,
col = ifelse(all$type=="guess",grey(0.5),"red"),pch=16)
read_csv("measles_params.csv") %>%
filter(loglik > -160) %>%
bind_rows(guesses) %>%
mutate(type=if_else(is.nan(loglik),"guess","result")) %>%
arrange(type) -> all
pairs(~loglik+Beta+eta+rho, data = all,
col = ifelse(all$type=="guess",grey(0.5),"red"),pch=16)
read_csv("measles_params.csv") %>%
filter(loglik > -160) %>%
bind_rows(guesses) %>%
mutate(type=if_else(is.na(loglik),"guess","result")) %>%
arrange(type) -> all
pairs(~loglik+Beta+eta+rho, data = all,
col = ifelse(all$type=="guess",grey(0.5),"red"),pch=16)
View(all)
all %>%
filter(type=="result") %>%
filter(loglik > -130) %>%
ggplot(aes(x=eta, y = loglik))+
geom_point()+
labs(
x = expression("eta"),
title = "poor man's profile likelihood"
)
profileDesign(
eta = seq(0.01,0.85,length = 40),
lower = box[1,c("Beta", "rho")],
upper = box[2,c("Beta", "rho")],
nprof = 15, type = "runif"
) -> guesses
profileDesign(
eta = seq(0.01,0.85,length = 40),
lower = box[1,c("Beta","rho")],
upper = box[2,c("Beta","rho")],
nprof = 15, type = "runif"
) -> guesses
profileDesign(
eta = seq(0.01,0.85,length = 40),
lower = box[1,c("Beta","rho")],
upper = box[2,c("Beta","rho")],
nprof = 15, type = "runif"
) -> guesses
profileDesign(
eta = seq(0.01,0.85,length = 40),
lower = box[1,c("Beta","rho")],
upper = box[2,c("Beta","rho")],
nprof = 15, type = "runif"
) -> guesses
profile_design(
eta = seq(0.01,0.85,length = 40),
lower = box[1,c("Beta","rho")],
upper = box[2,c("Beta","rho")],
nprof = 15, type = "runif"
) -> guesses
profileDesign(
eta = seq(0.01,0.85,length = 40),
lower = box[1,c("Beta","rho")],
upper = box[2,c("Beta","rho")],
nprof = 15, type = "runif"
) -> guesses
profileDesign(
eta = seq(0.01,0.85,length = 40),
lower=box[1,c("Beta","rho")],
upper=box[2,c("Beta","rho")],
nprof = 15, type = "runif"
) -> guesses
read_csv("measles_params.csv") %>%
filter(loglik>-140,loglik.se < 2) %>%
sapply(range) -> box
box
set.seed(1196696958)
profileDesign(
eta = seq(0.01,0.85,length = 40),
lower=box[1,c("Beta","rho")],
upper=box[2,c("Beta","rho")],
nprof = 15, type = "runif"
) -> guesses
plot(guesses)
View(guesses)
foreach(guess = iter(guesses,"row"), .combine = rbind) %dopar% {
library(pomp)
library(tidyverse)
mf1 %>%
mif2(params = c(unlist(guess), fixed_params),
rw.sd = rw.sd(Beta=0.02,rho=0.02)) %>%
mif2(Nmif = 50, cooling.fraction.50 = 0.3) -> mf
replicate(
10,
mf %>% pfilter(Np=10000) %>% logLik()
) %>%
logmeanexp(se=TRUE) -> ll
mf %>% coef() %>% bind_rows() %>%
bind_cols(loglik=ll[1], loglik.se = ll[2])
} -> reszlts
foreach(guess = iter(guesses,"row"), .combine = rbind) %dopar% {
library(pomp)
library(tidyverse)
mf1 %>%
mif2(params = c(unlist(guess), fixed_params),
rw.sd = rw.sd(Beta=0.02,rho=0.02)) %>%
mif2(Nmif = 50, cooling.fraction.50 = 0.3) -> mf
replicate(
10,
mf %>% pfilter(Np=10000) %>% logLik()
) %>%
logmeanexp(se=TRUE) -> ll
mf %>% coef() %>% bind_rows() %>%
bind_cols(loglik=ll[1], loglik.se = ll[2])
} -> results
read_csv("measles_params.csv") %>%
bind_rows(results) %>%
filter(is.finite(loglik)) %>%
arrange(-loglik) %>%
write_csv("measles_params.csv")
read_csv("measles_params.csv") %>%
filter(loglik > -130) -> all
pairs(~loglik+Beta+eta+rho,data = all, pch = 16)
results %>%
ggplot(aes(x=eta,y=loglik))+
geom_point()
results %>%
filter(is.finite(loglik)) %>%
group_by(round(eta,5)) %>%
filter(rank(-loglik)<3) %>%
ungroup()%>%
filter(loglik > -140) %>%
ggplot(aes(x=eta,y=loglik))+
geom_point()
maxloglik <- max(results$loglik,na.rm = TRUE)
ci.cutoff <- maxloglik-0.5*qchisq(df=1,p=0.95)
results %>%
filter(is.finite(loglik)) %>%
group_by(round(eta,5)) %>%
filter(rank(-loglik)<3) %>%
ungroup() %>%
ggplot(aes(x=eta,y=loglik)) +
geom_point()+
geom_smooth(method="loess",span=0.25)+
geom_hline(color="red",yintercept = ci.cutoff)+
lims(y=maxloglik-c(5,0))
results %>%
filter(is.finite(loglik)) %>%
group_by(round(eta,5)) %>%
filter(rank(-loglik)<3) %>%
ungroup() %>%
mutate(in_ci = loglik > max(loglik)-1.92) %>%
ggplot(aes(x=eta,y=loglik,color=in_ci)) +
geom_point()+
labs(
color="inside 95% CI?",
x=expression(eta),
y=expression(rho),
title = "profile trace"
)
results %>%
filter(is.finite(loglik)) %>%
group_by(round(eta,5)) %>%
filter(rank(-loglik)<3) %>%
ungroup() %>%
mutate(in_ci = loglik > max(loglik)-1.92) %>%
ggplot(aes(x=eta,y=rho,color=in_ci)) +
geom_point()+
labs(
color="inside 95% CI?",
x=expression(eta),
y=expression(rho),
title = "profile trace"
)
?dopa
?dopar
?dopar
?foreacg
?foreach
??foreach
library(dplyr)
library(purrr)
library(readr)
library(stringr)
library(tidyr)
library(doSNOW)
library(pomp)
library(magrittr)
library(foreach)
library(itertools)
library(parallel)
library(glue)
library(optparse)
library(ggplot2)
?foreach
library(ocn)
# install devtools (if previously not installed)
if (!("devtools" %in% installed.packages())) {install.packages("devtools")}
# install OCNet from GitHub
devtools::install_github("lucarraro/OCNet", build_vignettes = TRUE)
# install devtools (if previously not installed)
if (!("devtools" %in% installed.packages())) {install.packages("devtools")}
# install OCNet from GitHub
devtools::install_github("lucarraro/OCNet", build_vignettes = TRUE)
# install devtools (if previously not installed)
if (!("devtools" %in% installed.packages())) {install.packages("devtools")}
# install OCNet from GitHub
devtools::install_github("lucarraro/OCNet", build_vignettes = TRUE)
# install devtools (if previously not installed)
if (!("devtools" %in% installed.packages())) {install.packages("devtools")}
# install OCNet from GitHub
devtools::install_github("lucarraro/OCNet", build_vignettes = TRUE)
# install devtools (if previously not installed)
if (!("devtools" %in% installed.packages())) {install.packages("devtools")}
# install OCNet from GitHub
devtools::install_github("lucarraro/OCNet", build_vignettes = TRUE)
# install devtools (if previously not installed)
if (!("devtools" %in% installed.packages())) {install.packages("devtools")}
# install OCNet from GitHub
devtools::install_github("lucarraro/OCNet")
# install devtools (if previously not installed)
if (!("devtools" %in% installed.packages())) {install.packages("devtools")}
# install OCNet from GitHub
devtools::install_github("lucarraro/OCNet")
install.packages("dotCall64")
# install devtools (if previously not installed)
if (!("devtools" %in% installed.packages())) {install.packages("devtools")}
# install OCNet from GitHub
devtools::install_github("lucarraro/OCNet", build_vignettes = TRUE)
devtools::install_github("lucarraro/OCNet", build_vignettes = TRUE)
devtools::install_github("lucarraro/OCNet", build_vignettes = TRUE)
devtools::install_github("lucarraro/OCNet", build_vignettes = TRUE)
install.packages("bookdown")
devtools::install_github("lucarraro/OCNet", build_vignettes = TRUE)
OCN <- create_OCN(30,20)
library(OCNet)
OCN <- create_OCN(30,20)
draw_simple_OCN(OCN)
source("~/Untitled.Rmd.R", echo=TRUE)
source("~/Untitled.Rmd.R", echo=TRUE)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
suppressPackageStartupMessages(library(OCNet))
suppressPackageStartupMessages(library(spam))
suppressPackageStartupMessages(library(igraph))
suppressPackageStartupMessages(library(SSN))
set.seed(1)
OCN <- create_OCN(30, 20, outletPos = 1)
OCN <- aggregate_OCN(landscape_OCN(OCN), thrA = 3)
par(mfrow = c(1, 3), mai = c(0, 0, 0.2, 0.2))
draw_simple_OCN(OCN, thrADraw = 3)
title("Optimal Channel Network")
draw_elev3D_OCN(OCN, drawRiver = FALSE, addColorbar = FALSE, expand = 0.2, theta = -30)
title("Elevation")
draw_thematic_OCN(OCN$AG$streamOrder, OCN, discreteLevels = TRUE, colPalette = rainbow(4))
title("Strahler stream order")
knitr::include_graphics("example_networks.png")
OCN
source("~/generate_ocn.R", echo=TRUE)
OCN <- create_OCN(300,200)
OCN <- create_OCN(80,50)
draw_simple_OCN(OCN)
OCNet::
OCN
landscape_OCN(OCN)
landscape_OCN(OCN)
draw_thematic_OCN(OCN)
LND <- landscape_OCN(OCN)
draw_thematic_OCN(LND)
AGR <- aggregate(LND)
AGR <- aggregate(OCN)
draw_contour_OCN(OCN)
draw_contour_OCN(LND)
draw_elev3D_OCN(LND)
draw_elev3Drgl_OCN(LND)
draw_elev3Drgl_OCN(LND)
find_area_threshold_OCN(LND)
View(OCN)
draw_elev2D_OCN(LND)
source("~/Documents/Research/opisthorchis/scripts/generate_OCNs_plot.R", echo=TRUE)
source("~/generate_ocn.R", echo=TRUE)
library(R.matlab)
library(OCNet)
OCN <- create_OCN(60,100,initialNoCoolingPhase = 0.4,displayUpdates = 2,nUpdates = 100,nIter = 30000*50)
OCN <- landscape_OCN(OCN)
OCN <- aggregate_OCN(OCN,thrA = 20)
OCN <- rivergeometry_OCN(OCN)
draw_subcatchments_OCN(OCN)
library(OCNet)
OCN <- create_OCN(60,100,initialNoCoolingPhase = 0.4,displayUpdates = 2,nUpdates = 100,nIter = 30000*50)
library(OCNet)
OCN <- create_OCN(80,100,initialNoCoolingPhase = 0.4,displayUpdates = 2,nUpdates = 100,nIter = 30000*50)
OCN <- landscape_OCN(OCN)
OCN <- aggregate_OCN(OCN,thrA = 20)
OCN <- rivergeometry_OCN(OCN)
draw_subcatchments_OCN(OCN)
library(R.matlab)
writeMat("subcatchments.mat", CTC = OCN$FD$toSC, X = OCN$FD$X, Y = OCN$FD$Y)
writeMat("FD.mat", FD.A = OCN$FD$A, FD.X = OCN$FD$X, FD.Y = OCN$FD$Y, FD.downNode = OCN$FD$downNode)
writeMat("SC.mat", SC = OCN$SC, SCX = OCN$SC$X, SCY = OCN$SC$Y)
writeMat("AG.mat", A = OCN$AG$A, downNode = OCN$AG$downNode)
draw_contour_OCN(OCN)
OCN$FD$outlet
writeMat("outlet.mat", outlet = OCN$FD$outlet)
library(OCNet)
OCN <- create_OCN(80,100,initialNoCoolingPhase = 0.4,displayUpdates = 2,nUpdates = 100,nIter = 30000*50)
OCN <- landscape_OCN(OCN)
OCN <- aggregate_OCN(OCN,thrA = 20)
OCN <- rivergeometry_OCN(OCN)
draw_subcatchments_OCN(OCN)
OCN <- aggregate_OCN(OCN,thrA = 50)
OCN <- rivergeometry_OCN(OCN)
draw_subcatchments_OCN(OCN)
OCN <- aggregate_OCN(OCN,thrA = 60)
OCN <- rivergeometry_OCN(OCN)
draw_subcatchments_OCN(OCN)
OCN <- aggregate_OCN(OCN,thrA = 40)
OCN <- rivergeometry_OCN(OCN)
draw_subcatchments_OCN(OCN)
OCN <- aggregate_OCN(OCN,thrA = 80)
OCN <- rivergeometry_OCN(OCN)
draw_subcatchments_OCN(OCN)
OCN <- aggregate_OCN(OCN,thrA = 50)
OCN <- rivergeometry_OCN(OCN)
draw_subcatchments_OCN(OCN)
OCN <- aggregate_OCN(OCN,thrA = 60)
OCN <- rivergeometry_OCN(OCN)
draw_subcatchments_OCN(OCN)
OCN <- aggregate_OCN(OCN,thrA = 55)
OCN <- rivergeometry_OCN(OCN)
draw_subcatchments_OCN(OCN)
View(OCN)
save(OCN)
save(OCN,'OCN.Rda')
save.image("~/Documents/GitHub/opisthorchis-theoretical/dataOCN/OCN.RData")
setwd("~/Documents/GitHub/opisthorchis-theoretical/dataOCN")
library(R.matlab)
writeMat("subcatchments.mat", CTC = OCN$FD$toSC, X = OCN$FD$X, Y = OCN$FD$Y)
writeMat("FD.mat", FD.A = OCN$FD$A, FD.X = OCN$FD$X, FD.Y = OCN$FD$Y, FD.downNode = OCN$FD$downNode)
writeMat("SC.mat", SC = OCN$SC, SCX = OCN$SC$X, SCY = OCN$SC$Y)
writeMat("AG.mat", A = OCN$AG$A, downNode = OCN$AG$downNode)
writeMat("outlet.mat", outlet = OCN$FD$outlet)
draw_contour_OCN(OCN)
writeMat("FD.mat", FD.A = OCN$FD$A, FD.X = OCN$FD$X, FD.Y = OCN$FD$Y, FD.downNode = OCN$FD$downNode, FD.Z = OCN$FD$Z)
writeMat("FD.mat", FD.A = OCN$FD$A, FD.X = OCN$FD$X, FD.Y = OCN$FD$Y, FD.downNode = OCN$FD$downNode, FD.Z = OCN$FD$Z)
OCN$FD$Z
library(R.matlab)
writeMat("FD.mat", FD.A = OCN$FD$A, FD.X = OCN$FD$X, FD.Y = OCN$FD$Y, FD.downNode = OCN$FD$downNode, FD.Z = OCN$FD$Z)
